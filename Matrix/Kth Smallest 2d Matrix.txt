Que-> Kth smallest element in a row-wise and column-wise sorted 2D array?
Output - Kth shortest element is 30 at k=7

class Program
    {
        static void Main(string[] args)
        {
            int[,] arr = { { 10, 20, 30, 40 },
                   { 15, 25, 35, 45 },
                   { 24, 29, 37, 48 },
                   { 32, 33, 39, 50 } };
            int k = 7;
            int n = arr.GetLength(0);
            Console.Write("3rd smallest element is " + KthSmallest(arr, n, k));
        }
        static int KthSmallest(int[,] arr, int n, int k)
        {
            if (k < 0 || k > n * n)
                return int.MaxValue;

            HeapNode[] harr = new HeapNode[n];
            for (int i = 0; i < n; i++)
            {
                harr[i] = new HeapNode(arr[0, i], 0, i);
            }
            HeapNode hr = new HeapNode(0, 0, 0);
            for (int i = 0; i < k; i++)
            {
                hr = harr[0];

                int nextVal = hr.r < n - 1 ? arr[hr.r + 1, hr.c] : int.MaxValue;

                harr[0] = new HeapNode(nextVal, hr.r + 1, hr.c);

                MeanHeapify(harr, 0, n);
            }
            return hr.val;
        }
        public class HeapNode
        {
            public int val;
            public int r;
            public int c;
            public HeapNode(int val, int r, int c)
            {
                this.val = val;
                this.r = r;
                this.c = c;
            }
        }
        static void MeanHeapify(HeapNode[] harr, int i, int heap_size)
        {
            int l = 2 * i + 1;
            int r = 2 * i + 2;

            if (l < heap_size && r < heap_size && harr[l].val < harr[i].val && harr[r].val < harr[i].val)
            {
                HeapNode temp = new HeapNode(0, 0, 0);
                temp = harr[r];
                harr[r] = harr[i];
                harr[i] = harr[l];
                harr[l] = temp;
                MeanHeapify(harr, l, heap_size);
                MeanHeapify(harr, r, heap_size);
            }
            if (l < heap_size && harr[l].val < harr[i].val)
            {
                HeapNode temp = new HeapNode(0, 0, 0);
                temp = harr[i];
                harr[i] = harr[l];
                harr[l] = temp;
                MeanHeapify(harr, l, heap_size);
            }
        }
    }