Que-> Word wrap problem.

class Program
    {
        static int Max = int.MaxValue;
        static void Main(string[] args)
        {
            int[] l = { 3, 2, 2, 5 };
            int n = l.Length;
            int M = 6;
            SolveWordWrap(l, n, M);
        }
        static void SolveWordWrap(int[] l, int n, int M)
        {
            int[,] extras = new int[n + 1, n + 1];

            int[,] lc = new int[n + 1, n + 1];

            int[] c = new int[n + 1];

            int[] p = new int[n + 1];

            for (int i = 1; i <= n; i++)
            {
                extras[i, i] = M - l[i - 1];
                for (int j = i+1; j <= n; j++)
                {
                    extras[i, j] = extras[i, j - 1] - l[j - 1] - 1;
                }
            }
            for (int i = 1; i <= n; i++)
            {
                for (int j = i; j <= n; j++)
                {
                    if (extras[i, j] < 0)
                        lc[i, j] = Max;
                    else if (j == n && extras[i, j] >= 0)
                        lc[i, j] = 0;
                    else
                        lc[i, j] = extras[i, j] * extras[i, j];
                }
            }
            c[0] = 0;
            for (int j = 1; j <= n; j++)
            {
                c[j] = Max;
                for (int i = 1; i <= j; i++)
                {
                    if (c[i - 1] != Max && lc[i, j] != Max && (c[i - 1] + lc[i, j] < c[j]))
                    {
                        c[j] = c[i - 1] + lc[i, j];
                        p[j] = i;
                    }
                }
            }
            PrintSolution(p, n);
        }
        static int PrintSolution(int[] p, int n)
        {
            int k;
            if (p[n] == 1)
                k = 1;
            else
                k = PrintSolution(p, p[n] - 1) + 1;

            Console.WriteLine("Line Number" + " " + k + "From word number " + " " + p[n] + " " + "to" + " " + n);
            return k;
        }
}