Que-> Find longest palindromic substring.
Input- ABDCBCDBDCBBC
Output- BCDBDCB

class Program
    {
        static void Main(string[] args)
        {
            string str = "ABDCBCDBDCBBC";

            Console.WriteLine("The longest palindromic substring of " + str + " is "
                    + findLongestPalindromicSubstring(str, str.Length - 1));
        }
        public static string findLongestPalindromicSubstring(string str, int len)
        {
	if (len == 0)
                	       return str;
            // `max_str` stores the maximum length palindromic substring
            // found so far

            string max_str = "", curr_str;

            // `max_length` stores the maximum length of palindromic
            // substring found so far

            int max_length = 0, curr_length;

            // consider every character of the given string as a midpoint and expand
            // in both directions to find maximum length palindrome

            for (int i = 0; i < len; i++)
            {
                // find the longest odd length palindrome with `str[i]` as a midpoint

                curr_str = expand(str, i, i);
                curr_length = curr_str.Length;


                // update maximum length palindromic substring if odd length
                // palindrome has a greater length

                if (curr_length > max_length)
                {
                    max_length = curr_length;
                    max_str = curr_str;
                }

                // Find the longest even length palindrome with str[i] and
                // str[i+1] as midpoints. Note that an even length palindrome
                // has two midpoints.

                curr_str = expand(str, i, i + 1);
                curr_length = curr_str.Length;

                // update maximum length palindromic substring if even length
                // palindrome has a greater length

                if (curr_length > max_length)
                {
                    max_length = curr_length;
                    max_str = curr_str;
                }
            }

            return max_str;
        }
        // Expand in both directions of `low` and `high` to find
        // maximum length palindrome
        public static string expand(string str, int low, int high)
        {
            int len = str.Length;

            // expand in both directions
            while (low >= 0 && high < len && (str[low] == str[high]))
            {
                low--;
                high++;
            }

            // return palindromic substring
            return str.Substring(low + 1, high - low - 1);
        }
}