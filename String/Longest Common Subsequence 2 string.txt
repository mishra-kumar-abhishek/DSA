Que-> Find the longest common subsequence between two strings.
Input : string str1 = "ABCDGH" , str2 = "AEDFHR";
Output: Length of LCS is 3
----------------------------------------------------------------------------------------------------------------
1st Approach- Naive Approach
TC - O(n2)
----------------------------------------------------------------------------------------------------------------
class Program
    {
        static void Main(string[] args)
        {
            string str1 = "ABCDGH";
            string str2 = "AEDFHR";

            char[] X = str1.ToCharArray();
            char[] Y = str2.ToCharArray();

            int m = X.Length;
            int n = Y.Length;

            Console.WriteLine("Length of LCS is " + LCS(X, Y, m, n));
        }
        static int LCS(char[] X, char[] Y, int m, int n)
        {
            if (m == 0 || n == 0)
                return 0;
            if (X[m - 1] == Y[n - 1])
                return 1 + LCS(X, Y, m - 1, n - 1);
            else
                return max(LCS(X,Y,m,n-1),LCS(X,Y,m-1,n));
        }
        static int max(int a, int b)
        {
            return (a > b) ? a : b;
        }
}
-------------------------------------------------------------------------------------------------------------------
2nd Approach- Optimized.
TC: O(mn)
------------------------------------------------------------------------------------------------
class Program
    {
        static void Main(string[] args)
        {
            string str1 = "ABCDGH";
            string str2 = "AEDFHR";

            char[] X = str1.ToCharArray();
            char[] Y = str2.ToCharArray();

            int m = X.Length;
            int n = Y.Length;

            Console.WriteLine("Length of LCS is " + LCS(X, Y, m, n));
        }
        static int LCS(char[] X, char[] Y, int m, int n)
        {
            if (m == 0 || n == 0)
                return 0;
            int[,] L = new int[m + 1, n + 1];
            for (int i = 0; i <= m; i++)
            {
                for (int j = 0; j <= n; j++)
                {
                    if (i == 0 || j == 0)
                        L[i, j] = 0;
                    else if (X[i - 1] == Y[j - 1])
                        L[i, j] = L[i - 1, j - 1] + 1;
                    else
                        L[i, j] = max(L[i - 1, j], L[i, j - 1]);
                }
            }
            return L[m, n];
        }
        static int max(int a, int b)
        {
            return (a > b) ? a : b;
        }
}